syntax = "proto3";

service SimpleService {
    rpc GetChord(GetInfo) returns (GetNodeChordReply);
    rpc GetNode(GetInfo) returns (GetNodeChordReply);
    rpc Save(SaveKey) returns (SRFReply);
    rpc Remove(RemFiKey) returns (SRFReply);
    rpc Find(RemFiKey) returns (SRFReply);
    
    rpc GetType(GetInfo) returns (TypeReply);
    rpc RegisterNode(NodeInit) returns (NodeReply);
    rpc DeregisterNode(NodeId) returns (DeregReply);
    rpc GetFingerTable(NodeId) returns (FingerTable);
    rpc GetSuccessor(NodeId) returns (NodePair);
    rpc ReloadTable(GetInfo) returns (GetInfo);
    rpc GetKeysText(GetInfo) returns (KeysTextReply);

    rpc SaveFromClient(SaveKey) returns (SRFReply); //here we need additional protocol as we firstly find the key where we save, and then save it 
    rpc RemoveFromClient(RemFiKey) returns (SRFReply); 
    rpc FindKey(RemFiKey) returns (SRFReply);  
}



// Commands from client
/*
● get_info
Calls get_chord_info() if connected to a registry. Or get_finger_table() if connected
to a node.
*/
message GetInfo {
}

/*
key: some key
text: some “text” here
It tells the connected node to save the text with the given key. Prints the result.
*/
message SaveKey {
    string key = 1;
    string text = 2;
}

/*
It tells the connected node  
to remove the text with the given key/to find a node with the key.
*/
message RemFiKey {
    string key = 1;
}


// Reply for client

//Return list of tuples/finger table
message GetNodeChordReply {
    int32 id = 1;
    repeated string table = 2;
}

message SRFReply {
    string reply =1;
    bool success=2;
}

message TypeReply {
    string type = 1;
}
//message for registering of new node
message NodeInit {
    string ipaddr = 1;
    string port = 2;
}
//reply to node with its id and maximum number
message NodeReply {
    int32 id = 1;
    int32 m = 2;
}

message NodeId {
    int32 id = 1;
}
//returns if we deregistered successfully and the message for that
message DeregReply {
    bool ack = 1;
    string output = 2;
}

message TableReply {
    int32 pred = 1;
    repeated string table = 2;
}
//message for usual node id and it's address for connection
message NodePair {
    int32 nodeId = 1;
    string address = 2;
}
//message for finger table return - return predecessor and finger table of the node
message FingerTable {
  
    NodePair id = 1;
    repeated NodePair pairs = 2;
}

message KeysTextReply {
    repeated string keys = 1;
}